name: CI
on:
  push:
    branches-ignore:
      - master
  pull_request:
    branches:
      - master

env:
  APP_ENV: test

jobs:
  security-checker:
    name: Dependencies security check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Security checker
        run: make security

  coding-standards:
    name: Coding standards check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Code Sniffer [PHP-CS]
        uses: docker://enabel/phpqa:7.2
        with:
          args: phpcs -v --standard=PSR2 --ignore=./src/Kernel.php ./src
      - name: PHPStan
        uses: docker://enabel/phpqa:7.2
        with:
          args: phpstan analyze ./src/ -l 4
      - name: PHP Mess Detector
        uses: docker://enabel/phpqa:7.2
        with:
          args: phpmd ./src/ ansi ./codesize.xml
      - name: Twig lint
        uses: docker://enabel/phpqa:7.2
        with:
          args: twig lint ./templates
#      - name: Twig CS
#        uses: docker://enabel/phpqa:7.2
#        with:
#          args: twigcs ./templates

  tests:
    name: Tests (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest
    needs: [ security-checker, coding-standards ]
    services:
      mariadb:
        image: mariadb:10.1.29
        env:
          MYSQL_ROOT_PASSWORD: toor
          MYSQL_DATABASE: admanager
          MYSQL_USER: db_user
          MYSQL_PASSWORD: db_password
        ports:
          - 3306:3306
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.2']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, ldap
        env:
          update: true

      # —— Composer 🧙‍️ —————————————————————————————————————————————————————————
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: make install

      # —— Symfony 🎵 ——————————————————————————————————————————————————————————
      - name: Check requirements
        run: make requirements

      # —— Tests ✅ ———————————————————————————————————————————————————————————
      - name: Create & fill database
        run: make load-fixtures

      - name: Run functionnal and unit tests
        run: make test

  ## —— Notification 🔔 ————————————————————————————————————————————————————
  slack:
    name: Slack
    runs-on: ubuntu-latest
    needs: [tests]
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v1
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,author,took,commit,eventName,job
          custom_payload: |
            {
                username: 'Github Actions',
                attachments: [{
                  color: '${{ env.WORKFLOW_CONCLUSION }}' === 'success' ? 'good' : '${{ env.WORKFLOW_CONCLUSION }}' === 'failure' ? 'danger' : 'warning',
                  title: 'Password - Tests',
                  text: `Commit: ${process.env.AS_MESSAGE} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}\nBy ${process.env.AS_AUTHOR} ${{ env.WORKFLOW_CONCLUSION }}`,
                }]
              }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
