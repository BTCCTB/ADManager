<?php

namespace App\Repository;

use App\Entity\Account;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * AccountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Account::class);
    }

    /**
     * Find all active user
     *
     * @return User[]
     */
    public function findAllActive()
    {
        return $this->findBy(['isActive' => 1]);
    }

    /**
     * Generate query to get all active account in pagination
     *
     * @return \Doctrine\ORM\Query
     */
    public function paginateAllActive(String $searchCriteria = null)
    {
        return $this->createQueryBuilder('account')
            ->andWhere('account.isActive = :active')
            ->andWhere('(account.firstname LIKE :criteria OR account.lastname LIKE :criteria OR account.email LIKE :criteria OR account.employeeId LIKE :criteria)')
            ->setParameter('active', 1)
            ->setParameter('criteria', (empty($searchCriteria)?'%':'%' . $searchCriteria . '%'))
            ->getQuery()
        ;
    }

    /**
     * Find a user by email
     *
     * @param String $email
     *
     * @return null|Object|User
     */
    public function findByEmail(String $email)
    {
        return $this->findOneBy(['email' => $email]);
    }

    /**
     * Update last login datetime
     *
     * @param String $email
     */
    public function setLastLogin(String $email)
    {
        $user = $this->findByEmail($email);
        if (null !== $user) {
            $user->setLastLoginAt(new \DateTime());
            $this->_em->persist($user);
            $this->_em->flush();
        }
    }

    public function setGeneratedPassword(String $email, String $password)
    {
        $user = $this->findByEmail($email);
        if (null !== $user) {
            $user->setGeneratedPassword($password);
            $this->_em->persist($user);
            $this->_em->flush();
        }
    }

    /**
     * @param Account $account
     * @param String  $newEmail
     *
     * @return Account
     *
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function changeEmail(Account $account, String $newEmail): Account
    {
        $account
            ->setEmail($newEmail)
            ->setUserPrincipalName($newEmail)
            ->setEmailContact($newEmail);
        $this->_em->persist($account);
        $this->_em->flush();

        return $account;
    }
}
